#pragma once
#ifndef FECHO_H
#define FECHO_H

//editar esse arquivo e chamar as funcoes no main
#include<iostream>
#include<new>
#include<vector>
#include "shader.hpp"
#include "mesh.hpp"


using std::cout; using std::nothrow; using std::vector;


int getXmax(Vertex* vertices, int n){
    int xmaximo = 0;
    for (int i = 1; i < n; i++)
    {
        if(vertices[xmaximo].px < vertices[i].px || 
          (vertices[xmaximo].px == vertices[i].px && vertices[xmaximo].py < vertices[i].py))
        {
            xmaximo = i;
        }
    }
    return xmaximo;
}

int getXmin(Vertex* vertices, int n){
    int xminimo = 0;
    for (int i = 1; i < n; i++)
    {
        if(vertices[xminimo].px > vertices[i].px || 
          (vertices[xminimo].px == vertices[i].px && vertices[xminimo].py > vertices[i].py))
        {
            xminimo = i;
        }
    }
    return xminimo;
}

/* 0 -> left, 1 -> right*/
int sidePoint(Vertex pi, Vertex pf, Vertex ver){
    double val = (pf.py - pi.py) * (ver.px - pf.px) - (pf.px - pi.px) * (ver.py - pf.py);
    
    if(val < 0)
    {
        return -1;
    }
    if(val > 0){
        return 1;
    }

    return 0;
}

double lineDist(Vertex p1, Vertex p2, Vertex p) {
    return abs ((p.py - p1.py) * (p2.px - p1.px) - (p2.py - p1.py) * (p.px - p1.px));
}


bool hasValue(vector<Vertex> vec, Vertex val){
    for(auto i: vec){
        if(i == val){
            return true;
        }
    }
    return false;
}

void QuickHullAux(Vertex* vertices, int n, Vertex p1, Vertex p2, int side, vector<Vertex>& fecho)
{
    int ind = -1;
    int dist_max = 0;

    //calcula a distancia da linha p1 - p2 para o ponto[i]
    for (int i = 0; i < n; i++)
    {
        double distancia = lineDist(p1, p2, vertices[i]);
        //se o ponto estiver na direcao que esta sendo verificada e estiver mais longe doque a distancia
        //maxima o indice sera esse ponto e a distancia maxima sera ela
        if(sidePoint(p1, p2, vertices[i]) == side && distancia > dist_max){
            dist_max = distancia;
            ind = i;
        }
    }
    
    //se não tiver ponto mais ao lado que estou verificando adicione os dois pontos para o fecho
    //e retorne
    if(ind == -1){
        return;
    }else{
        if(hasValue(fecho, vertices[ind])){
            return;
        }else{
            fecho.push_back(vertices[ind]);
        }
    }
    //passa o ponto encontrado e o primeiro ponto, o lado passado será o inverso da posicao
    //do ponto 2 em relacao aos pontos passados
    //QuickHullAux(vertices, n, vertices[ind], p1, -sidePoint(vertices[ind], p1, p2), fecho);

    //QuickHullAux(vertices, n, vertices[ind], p2, -sidePoint(vertices[ind], p2, p1), fecho);
}

vector<Vertex> QuickHull(Vertex* vertices, int n){
    //Vertex* fecho = new(nothrow)Vertex[n];
    cout << "Quick Hull\n";

    vector<Vertex> fecho;
    //verifica se o numero de pontos é menor que 3
    if (n <= 3) {
        for (int i=0; i<n; i++)
            fecho.push_back(vertices[i]);
        return fecho;
    }
    //achar xmax e xmin
    int pontoMax = getXmax(vertices,  n);
    int pontoMin = getXmin(vertices,  n);

    
    //pega o x minimo e maximo
    cout << "Xmax: " << vertices[pontoMax].px << " - " << vertices[pontoMax].py << "\n";
    cout << "Xmin: " << vertices[pontoMin].px << " - " << vertices[pontoMin].py << "\n";
    fecho.push_back(vertices[pontoMin]);
    fecho.push_back(vertices[pontoMax]);
    //divide o conjunto em 2
    //lado direito
    QuickHullAux(vertices, n, vertices[pontoMin], vertices[pontoMax], 1, fecho);
    //lado esquerdo
    //QuickHullAux(vertices, n, vertices[pontoMin], vertices[pontoMax], -1, fecho);


    return fecho;
}

void Graham(){
    cout << "Graham\n";
}


#endif